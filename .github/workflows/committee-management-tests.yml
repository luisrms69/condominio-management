name: Committee Management Tests

on:
  push:
    paths:
      - 'condominium_management/committee_management/**'
      - '.github/workflows/committee-management-tests.yml'
  pull_request:
    paths:
      - 'condominium_management/committee_management/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  committee-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue even if one test fails
      matrix:
        doctype:
          - "Agreement Tracking"
          - "Committee Member" 
          - "Committee Meeting"
          - "Assembly Management"
          - "Voting System"
          - "Committee Poll"
          - "Community Event"
          - "Committee KPI"
          - "Meeting Schedule"
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_frappe
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wkhtmltopdf \
            libmysqlclient-dev \
            redis-tools \
            curl

      - name: Setup Frappe Bench
        run: |
          pip install frappe-bench
          git clone https://github.com/frappe/frappe --branch version-15 --depth 1
          pip install -e frappe/

      - name: Setup ERPNext
        run: |
          git clone https://github.com/frappe/erpnext --branch version-15 --depth 1
          pip install -e erpnext/

      - name: Initialize Frappe Site
        run: |
          export DATABASE_URL="mysql://root:root@127.0.0.1:3306/test_frappe"
          cd frappe
          bench init --python-version 3.11 --frappe-path . ../test-bench --skip-redis-config-generation
          cd ../test-bench
          
          # Configure for testing
          bench get-app condominium_management ${{ github.workspace }}
          bench new-site test_site --db-root-password root --admin-password admin --no-mariadb-socket
          bench --site test_site install-app erpnext
          bench --site test_site install-app condominium_management
          bench --site test_site set-config allow_tests true

      - name: Test ${{ matrix.doctype }}
        run: |
          cd test-bench
          bench --site test_site run-tests --doctype "${{ matrix.doctype }}" --coverage
        continue-on-error: true  # Don't fail the entire workflow

      - name: Generate Test Report
        if: always()
        run: |
          cd test-bench
          echo "## Test Results for ${{ matrix.doctype }}" > test-report-${{ matrix.doctype }}.md
          echo "**Date:** $(date)" >> test-report-${{ matrix.doctype }}.md
          echo "**Status:** $([ $? -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")" >> test-report-${{ matrix.doctype }}.md
          echo "" >> test-report-${{ matrix.doctype }}.md
          
          # Include any test logs
          if [ -f sites/test_site/logs/frappe.log ]; then
            echo "### Test Logs:" >> test-report-${{ matrix.doctype }}.md
            echo '```' >> test-report-${{ matrix.doctype }}.md
            tail -50 sites/test_site/logs/frappe.log >> test-report-${{ matrix.doctype }}.md
            echo '```' >> test-report-${{ matrix.doctype }}.md
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.doctype }}
          path: |
            test-bench/test-report-${{ matrix.doctype }}.md
            test-bench/sites/test_site/logs/
          retention-days: 30

  test-summary:
    needs: committee-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Generate Summary Report
        run: |
          echo "# Committee Management Test Summary" > test-summary.md
          echo "**Date:** $(date)" >> test-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-summary.md
          echo "**Commit:** ${{ github.sha }}" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## Test Results by DocType:" >> test-summary.md
          echo "" >> test-summary.md
          
          for dir in test-results-*/; do
            if [ -d "$dir" ]; then
              doctype=$(echo "$dir" | sed 's/test-results-//' | sed 's/\///')
              echo "- **$doctype**: Processing..." >> test-summary.md
              
              if [ -f "$dir/test-report-$doctype.md" ]; then
                status=$(grep "Status:" "$dir/test-report-$doctype.md" | head -1)
                echo "  $status" >> test-summary.md
              else
                echo "  ❓ UNKNOWN" >> test-summary.md
              fi
            fi
          done
          
          echo "" >> test-summary.md
          echo "## Next Steps:" >> test-summary.md
          echo "1. Review failed tests individually" >> test-summary.md
          echo "2. Apply Continue.dev auto-generation for failed tests" >> test-summary.md
          echo "3. Update test files with corrected field names and required fields" >> test-summary.md

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: committee-management-test-summary
          path: test-summary.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Committee Management Test Results\n\n${summary}\n\n*Generated by automated testing workflow*`
            });